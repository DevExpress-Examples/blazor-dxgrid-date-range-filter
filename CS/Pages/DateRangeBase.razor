@using DevExpress.Data.Filtering;
@using DevExpress.Data.Filtering.Helpers;

<DxDateRangePicker StartDate="@StartDate"
                   EndDate="@EndDate"
                   StartDateChanged="@((DateTime? newStartDate) => StartDate_Changed(newStartDate))"
                   EndDateChanged="@((DateTime? newEndDate)=> EndDate_Changed(newEndDate))"
                   Enabled="@DateRangePickerEnabled"
                   MinDate="@MinDate"
                   MaxDate="@MaxDate"
                   ClearButtonDisplayMode="@DataEditorClearButtonDisplayMode.Auto" />

@code {
    [Parameter]
    public string FieldName { get; set; }
    [Parameter]
    public CriteriaOperator FilterCriteria { get; set; }
    [Parameter]
    public EventCallback<CriteriaOperator> FilterCriteriaChanged { get; set; }
    
    [Parameter]
    public bool DateRangePickerEnabled { get; set; } = true;
    [Parameter]
    public DateTime MinDate { get; set; } = DateTime.MinValue;
    [Parameter]
    public DateTime MaxDate { get; set; } = DateTime.MaxValue;

    DateTime? StartDate { get; set; }
    DateTime? EndDate { get; set; }

    protected override async Task OnInitializedAsync() {
        (StartDate, EndDate) = LoadDateRangeValues(FilterCriteria, FieldName);
    }

    void StartDate_Changed(DateTime? value) {
        StartDate = value;
        UpdateCriteria();
    }
    void EndDate_Changed(DateTime? value) {
        EndDate = value;
        UpdateCriteria();
    }
    async Task UpdateCriteria() {
        FilterCriteria = CreateDateRangeCriteria(StartDate, EndDate, FieldName);
        await FilterCriteriaChanged.InvokeAsync(FilterCriteria);
    }

    static CriteriaOperator CreateDateRangeCriteria(DateTime? startDate, DateTime? endDate, string fieldName) {
        CriteriaOperator left = null;
        CriteriaOperator right = null;

        var prop = new OperandProperty(fieldName);
        if(startDate != null)
            left = prop >= startDate;
        if(endDate != null)
            right = prop < ConvertEndDateToOperandDate(endDate);

        return left & right;
    }
    static DateTime? ConvertEndDateToOperandDate(DateTime? endDate) => endDate?.Date.AddDays(1);
    static (DateTime? startDate, DateTime? endDate) LoadDateRangeValues(CriteriaOperator criteria, string fieldName) {
        CriteriaOperator left = null;
        CriteriaOperator right = null;

        if(criteria is GroupOperator groupOp && groupOp.OperatorType == GroupOperatorType.And && groupOp.Operands.Count == 2) {
            left = groupOp.Operands[0];
            right = groupOp.Operands[1];
        } else {
            left = right = criteria;
        }

        return (
            ExtractRangeDate(left, fieldName, BinaryOperatorType.GreaterOrEqual),
            ConvertOperandDateToEndDate(ExtractRangeDate(right, fieldName, BinaryOperatorType.Less))
        );
    }
    static DateTime? ExtractRangeDate(CriteriaOperator criteria, string fieldName, BinaryOperatorType opType) {
        var canExtract = criteria is BinaryOperator binaryOp &&
                         binaryOp.OperatorType == opType &&
                         binaryOp.LeftOperand is OperandProperty prop &&
                         binaryOp.RightOperand is OperandValue opValue &&
                         prop.PropertyName == fieldName &&
                         opValue.Value is DateTime;
        if(canExtract)
            return (DateTime)((OperandValue)((BinaryOperator)criteria).RightOperand).Value;
        return null;
    }
    static DateTime? ConvertOperandDateToEndDate(DateTime? endDate) => endDate?.Date.AddDays(-1);
}
